/*
  app.js -- This creates an Express webserver with login/register/logout authentication
*/

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const path = require("path");  // to refer to local paths
const cookieParser = require("cookie-parser"); // to handle cookies
const session = require("express-session"); // to handle sessions using cookies
const debug = require("debug")("personalapp:server"); 
const layouts = require("express-ejs-layouts");
const axios = require("axios")

// *********************************************************** //
//  Loading models
// *********************************************************** //
const Rating = require('./models/Rating')
const Schedule = require('./models/Schedule')

// *********************************************************** //
//  Loading JSON datasets
// *********************************************************** //
const ratings = require('./public/data/ratings.json')


// *********************************************************** //
//  Connecting to the database
// *********************************************************** //

const mongoose = require( 'mongoose' );
const dotenv = require('dotenv')
dotenv.config()
const mongodb_URI = `mongodb+srv://${process.env.db_USERNAME}:${process.env.db_PASSWORD}@cluster0.ttrtu.mongodb.net/test`



mongoose.connect( mongodb_URI, { useNewUrlParser: true, useUnifiedTopology: true } );
// fix deprecation warnings
mongoose.set('useFindAndModify', false); 
mongoose.set('useCreateIndex', true);

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {console.log("we are connected!!!")});





// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies
app.use(
  session({
    secret: "zzbbyanana789sdfa8f9ds8f90ds87f8d9s789fds", // this ought to be hidden in process.env.SECRET
    resave: false,
    saveUninitialized: false
  })
);

// *********************************************************** //
//  Defining the routes the Express server will respond to
// *********************************************************** //


// here is the code which handles all /login /signin /logout routes
const auth = require('./routes/auth');
const { deflateSync } = require("zlib");
app.use(auth)

// middleware to test is the user is logged in, and if not, send them to the login page
const isLoggedIn = (req,res,next) => {
  if (res.locals.loggedIn) {
    next()
  }
  else res.redirect('/login')
}

// specify that the server should render the views/index.ejs page for the root path
// and the index.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", (req, res, next) => {
  res.render("index");
});

app.get("/about", (req, res, next) => {
  res.render("about");
});






/* ************************
  Loading (or reloading) the data into a collection
   ************************ */
// this route loads in the courses into the Course collection
// or updates the courses if it is not a new collection
 
app.get('/upsertDB',
  async (req,res,next) => {
    for (rating of ratings){
      const {reviewnum,brand,variety,style,country,stars}=rating;
      await Rating.findOneAndUpdate({reviewnum,brand,variety,style,country,stars},rating,{upsert:true})
    }
    const num = await Rating.find({}).count();
    res.send("data uploaded: "+num)
  }
)




app.get('/courses/show/:courseId',
  // show all info about a course given its courseid
  async (req,res,next) => {
    const {courseId} = req.params;
    const course = await Course.findOne({_id:courseId})
    res.locals.course = course
    //res.locals.times2str = times2str
    //res.json(course)
    res.render('course')
  }
)


app.post('/ratings/byBrand',
  // show list of courses in a given subject
  async (req,res,next) => {
    const {brand} = req.body;
    var regex = new RegExp(brand, "gi")
    const ratings = await Rating.find({brand:regex}).sort({stars:-1})
    
    res.locals.ratings = ratings
    //res.locals.times2str = times2str
    //res.json(courses)
    res.render('courselist')
  }
)

app.post('/ratings/byStyle',
  // show list of courses in a given subject
  async (req,res,next) => {
    const {style} = req.body;
    var regex = new RegExp(style, "gi")
    const ratings = await Rating.find({style:regex}).sort({stars:-1})
    
    res.locals.ratings = ratings
    //res.locals.times2str = times2str
    //res.json(courses)
    res.render('courselist')
  }
)

app.post('/ratings/byVariety',
  // show list of courses in a given subject
  async (req,res,next) => {
    const {word} = req.body;
    var regex = new RegExp(word, "gi")
    const ratings = await Rating.find({variety:regex}).sort({stars:-1})
    
    res.locals.ratings = ratings
    //res.locals.times2str = times2str
    //res.json(courses)
    res.render('courselist')
  }
)





app.use(isLoggedIn)

app.get('/addCourse/:courseId',
  // add a course to the user's schedule
  async (req,res,next) => {
    try {
      const courseId = req.params.courseId
      const userId = res.locals.user._id
      // check to make sure it's not already loaded
      const lookup = await Schedule.find({courseId,userId})
      if (lookup.length==0){
        const schedule = new Schedule({courseId,userId})
        await schedule.save()
      }
      res.redirect('/schedule/show')
    } catch(e){
      next(e)
    }
  })

app.get('/schedule/show',
  // show the current user's schedule
  async (req,res,next) => {
    try{
      const userId = res.locals.user._id;
      const courseIds = 
         (await Schedule.find({userId}))
                        .sort(x => x.term)
                        .map(x => x.courseId)
      res.locals.courses = await Course.find({_id:{$in: courseIds}})
      res.render('schedule')
    } catch(e){
      next(e)
    }
  }
)

app.get('/schedule/remove/:courseId',
  // remove a course from the user's schedule
  async (req,res,next) => {
    try {
      await Schedule.remove(
                {userId:res.locals.user._id,
                 courseId:req.params.courseId})
      res.redirect('/schedule/show')

    } catch(e){
      next(e)
    }
  }
)


// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// this processes any errors generated by the previous routes
// notice that the function has four parameters which is how Express indicates it is an error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render("error");
});


// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = "4999";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const server = http.createServer(app);

server.listen(process.env.PORT || port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}


server.on("error", onError);

server.on("listening", onListening);

module.exports = app;
